// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/undergg/go-microservices-tutorial/product-api/sdk/models"
)

// PutProductReader is a Reader for the PutProduct structure.
type PutProductReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutProductReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPutProductCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPutProductNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutProductCreated creates a PutProductCreated with default headers values
func NewPutProductCreated() *PutProductCreated {
	return &PutProductCreated{}
}

/*PutProductCreated handles this case with default header values.

No content is returned by this API endpoint
*/
type PutProductCreated struct {
}

func (o *PutProductCreated) Error() string {
	return fmt.Sprintf("[PUT /products][%d] putProductCreated ", 201)
}

func (o *PutProductCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutProductNotFound creates a PutProductNotFound with default headers values
func NewPutProductNotFound() *PutProductNotFound {
	return &PutProductNotFound{}
}

/*PutProductNotFound handles this case with default header values.

Generic error message returned as a string
*/
type PutProductNotFound struct {
	Payload *models.GenericError
}

func (o *PutProductNotFound) Error() string {
	return fmt.Sprintf("[PUT /products][%d] putProductNotFound  %+v", 404, o.Payload)
}

func (o *PutProductNotFound) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *PutProductNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
